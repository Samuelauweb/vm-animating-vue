{"remainingRequest":"/Users/samuellau/Desktop/VM_Animating-Vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/samuellau/Desktop/VM_Animating-Vue/src/views/State.vue?vue&type=style&index=0&id=51bc4b72&scoped=true&lang=css&","dependencies":[{"path":"/Users/samuellau/Desktop/VM_Animating-Vue/src/views/State.vue","mtime":1628746751520},{"path":"/Users/samuellau/Desktop/VM_Animating-Vue/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/samuellau/Desktop/VM_Animating-Vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/samuellau/Desktop/VM_Animating-Vue/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/samuellau/Desktop/VM_Animating-Vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/samuellau/Desktop/VM_Animating-Vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.bar {\n  padding: 5px;\n  background-color: #2c3e50;\n  border: 1px #16c0b0 solid;\n  min-width: 20px;\n}\n.bar span {\n  color: white;\n}\n\ncode {\n  background: lightcoral;\n  color: white;\n  padding: 2px;\n}\n",{"version":3,"sources":["State.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"State.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <!-- set the width of our <div> via style binding -->\n    <div :style=\"{ width: tweenedNumber + 'px' }\" class=\"bar\">\n      <span>{{ tweenedNumber.toFixed(0) }}</span> \n    </div>\n    <p>Using GSAP to manipulate data, instead of directly on element, using <code>watch</code> (a built-in Vue component option), <code>gsap.to()</code> method and <code>.toFixed()</code></p>\n  </div>\n</template>\n\n<script>\nimport gsap from 'gsap'\nexport default {\n  data() {\n    return {\n      number: 0,\n      tweenedNumber: 0\n    }\n  },\n  watch: {\n    number(newValue) {\n      // animate our data\n      gsap.to(this.$data, {\n        duration: 1,\n        ease: 'circ.out',\n        tweenedNumber: newValue //  the \"tweenedNumber\" property on our data (on this.$data)\n      })\n    }\n  },\n  methods: {\n    randomNumber() {\n      this.number = Math.floor(Math.random() * (800 - 0))\n    } // updates number data with a new value (ranging from 0-800)\n  },\n  created() {\n    setInterval(this.randomNumber, 1500)\n  } // runs randomNumber() method every 1500ms\n}\n</script>\n\n<style scoped>\n.bar {\n  padding: 5px;\n  background-color: #2c3e50;\n  border: 1px #16c0b0 solid;\n  min-width: 20px;\n}\n.bar span {\n  color: white;\n}\n\ncode {\n  background: lightcoral;\n  color: white;\n  padding: 2px;\n}\n</style>\n"]}]}